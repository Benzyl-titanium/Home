---
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { Icon } from "astro-icon/components";

interface Props {
	class?: string;
}

const className = Astro.props.class;
---

<div class:list={["card-base px-6 py-4", className]}>
  <div class="flex justify-between items-center">
    <h3 class="text-lg font-semibold text-black/90 dark:text-white/90">{i18n(I18nKey.comments)}</h3>
    <button id="refresh-comments-btn" class="p-2 text-sm rounded-lg transition-all hover:scale-105 active:scale-95 text-black/60 dark:text-white/60 hover:text-black/80 dark:hover:text-white/80">
      <Icon name="material-symbols:refresh-rounded" class="text-[1rem]"></Icon>
    </button>
  </div>
  <div class="giscus"></div>
</div>

<script>
  let giscusLoaded = false;

  const setGiscusTheme = () => {
    const giscusFrame = document.querySelector('iframe.giscus-frame') as HTMLIFrameElement;
    if (giscusFrame) {
      giscusFrame.contentWindow?.postMessage(
        { giscus: { setConfig: { theme: document.documentElement.classList.contains('dark') ? 'dark_dimmed' : 'light' } } },
        'https://giscus.app'
      );
    } else {
      // If iframe not found, retry after a short delay
      setTimeout(setGiscusTheme, 500);
    }
  };

  const loadGiscus = () => {
    const container = document.querySelector('.giscus');
    if (!container) return;

    container.innerHTML = '';

    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', 'Benzyl-titanium/Home');
    script.setAttribute('data-repo-id', 'R_kgDOOrZ0pA');
    script.setAttribute('data-category', 'General');
    script.setAttribute('data-category-id', 'DIC_kwDOOrZ0pM4CrkrZ');
    script.setAttribute('data-mapping', 'pathname');
    script.setAttribute('data-strict', '0');
    script.setAttribute('data-reactions-enabled', '1');
    script.setAttribute('data-emit-metadata', '1');
    script.setAttribute('data-input-position', 'top');
    script.setAttribute('data-theme', document.documentElement.classList.contains('dark') ? 'dark_dimmed' : 'light');
    script.setAttribute('data-lang', 'zh-CN');
    script.setAttribute('crossorigin', 'anonymous');
    script.async = true;

    container.appendChild(script);
    giscusLoaded = true;

    // After loading Giscus script, try to set theme with a delay for iframe to render.
    setTimeout(setGiscusTheme, 500);
  };

  const refreshComments = () => {
    const refreshBtn = document.getElementById('refresh-comments-btn');
    if (refreshBtn) {
      // Add loading animation
      refreshBtn.style.transform = 'rotate(360deg)';
      refreshBtn.style.transition = 'transform 0.5s ease-in-out';
      
      // Reload Giscus
      loadGiscus();
      
      // Reset button animation after a delay
      setTimeout(() => {
        refreshBtn.style.transform = '';
        refreshBtn.style.transition = '';
      }, 500);
    }
  };

  // Add click event listener to refresh button
  const setupRefreshButton = () => {
    const refreshBtn = document.getElementById('refresh-comments-btn');
    if (refreshBtn) {
      // Remove existing event listeners to prevent duplicates
      const newBtn = refreshBtn.cloneNode(true);
      refreshBtn.parentNode?.replaceChild(newBtn, refreshBtn);
      
      // Add new event listener
      newBtn.addEventListener('click', refreshComments);
    }
  };

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class') {
        setGiscusTheme(); // Call theme setter on class change
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class']
  });

  const initComments = () => {
    loadGiscus();
    setupRefreshButton();
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initComments);
  } else {
    initComments();
  }

  // Setup Swup hooks for page transitions
  const setupSwupHooks = () => {
    if (window.swup) {
      window.swup.hooks.on('content:replace', () => {
        // Re-initialize comments after content replacement
        setTimeout(() => {
          const giscusContainer = document.querySelector('.giscus');
          if (giscusContainer) {
            setupRefreshButton();
          }
        }, 100);
      });
    } else {
      document.addEventListener("swup:enable", setupSwupHooks);
    }
  };

  setupSwupHooks();

  // Expose refresh function globally for potential external use
  (window as any).refreshComments = refreshComments;
</script> 